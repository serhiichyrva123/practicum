
from rest_framework import viewsets, status
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from django_filters.rest_framework import DjangoFilterBackend

from drf_spectacular.utils import extend_schema, extend_schema_view

from electronic_store.models import Product, Order, Invoice
from electronic_store.business.serializers import ProductSerializer, OrderSerializer, InvoiceSerializer
from electronic_store.business.permissions import IsCashier, IsConsultant, IsAccountant
from electronic_store.business.filters import OrderFilter


@extend_schema_view(
    list=extend_schema(summary="–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤", tags=["–¢–æ–≤–∞—Ä–∏"]),
    retrieve=extend_schema(summary="–î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É", tags=["–¢–æ–≤–∞—Ä–∏"]),
)
class ProductViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer
    permission_classes = [IsAuthenticated]

    @extend_schema(
        summary="–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä",
        description="–°—Ç–≤–æ—Ä—é—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –≤–∏–±—Ä–∞–Ω–∏–π —Ç–æ–≤–∞—Ä –∑–∞ –π–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º",
        tags=["–¢–æ–≤–∞—Ä–∏"]
    )
    @action(detail=True, methods=['post'], permission_classes=[IsAuthenticated, IsCashier])
    def create_order(self, request, pk=None) -> Response:
        product = self.get_object()
        order = Order.objects.create(product=product)
        serializer = OrderSerializer(order)

        return Response(serializer.data, status=status.HTTP_201_CREATED)


@extend_schema_view(
    list=extend_schema(summary="–°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å", tags=["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"]),
    retrieve=extend_schema(summary="–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", tags=["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"]),
    create=extend_schema(summary="–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", tags=["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"]),
)
class OrderViewSet(viewsets.ModelViewSet):
    queryset = Order.objects.all()
    serializer_class = OrderSerializer
    permission_classes = [IsAuthenticated]
    filter_backends = [DjangoFilterBackend]
    filterset_class = OrderFilter

    @extend_schema(
        summary="–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        description="–î–æ–∑–≤–æ–ª—è—î –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –π–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º.",
        tags=["–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"]
    )
    @action(detail=True, methods=['post'], permission_classes=[IsAuthenticated, IsCashier | IsConsultant])
    def set_status(self, request, pk=None) -> Response:
        order = self.get_object()
        new_status = request.data.get('status')

        if new_status not in dict(Order.CHOICES):
            return Response({'error': '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å—Ç–∞—Ç—É—Å üíÄ'}, status=status.HTTP_400_BAD_REQUEST)

        order.status = new_status
        order.save()

        return Response({'status': order.status})


@extend_schema_view(
    list=extend_schema(summary="–°–ø–∏—Å–æ–∫ –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö", tags=["–ù–∞–∫–ª–∞–¥–Ω—ñ"]),
    retrieve=extend_schema(summary="–î–µ—Ç–∞–ª—ñ –Ω–∞–∫–ª–∞–¥–Ω–æ—ó", tags=["–ù–∞–∫–ª–∞–¥–Ω—ñ"]),
    create=extend_schema(summary="–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–∫–ª–∞–¥–Ω—É", tags=["–ù–∞–∫–ª–∞–¥–Ω—ñ"]),
)
class InvoiceViewSet(viewsets.ModelViewSet):
    queryset = Invoice.objects.all()
    serializer_class = InvoiceSerializer
    permission_classes = [IsAuthenticated, IsAccountant | IsCashier]